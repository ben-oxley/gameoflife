
build/ch.elf:     file format elf32-littlearm


Disassembly of section .text:

080000c0 <Reset_Handler>:
 80000c0:	b672      	cpsid	i
 80000c2:	4822      	ldr	r0, [pc, #136]	; (800014c <endfiniloop+0x4>)
 80000c4:	f380 8809 	msr	PSP, r0
 80000c8:	2002      	movs	r0, #2
 80000ca:	f380 8814 	msr	CONTROL, r0
 80000ce:	f3bf 8f6f 	isb	sy
 80000d2:	f000 fc85 	bl	80009e0 <__core_init>
 80000d6:	f000 fba3 	bl	8000820 <__early_init>
 80000da:	481d      	ldr	r0, [pc, #116]	; (8000150 <endfiniloop+0x8>)
 80000dc:	491d      	ldr	r1, [pc, #116]	; (8000154 <endfiniloop+0xc>)
 80000de:	4a1e      	ldr	r2, [pc, #120]	; (8000158 <endfiniloop+0x10>)

080000e0 <msloop>:
 80000e0:	4291      	cmp	r1, r2
 80000e2:	da02      	bge.n	80000ea <endmsloop>
 80000e4:	6008      	str	r0, [r1, #0]
 80000e6:	3104      	adds	r1, #4
 80000e8:	e7fa      	b.n	80000e0 <msloop>

080000ea <endmsloop>:
 80000ea:	491c      	ldr	r1, [pc, #112]	; (800015c <endfiniloop+0x14>)
 80000ec:	4a17      	ldr	r2, [pc, #92]	; (800014c <endfiniloop+0x4>)

080000ee <psloop>:
 80000ee:	4291      	cmp	r1, r2
 80000f0:	da02      	bge.n	80000f8 <endpsloop>
 80000f2:	6008      	str	r0, [r1, #0]
 80000f4:	3104      	adds	r1, #4
 80000f6:	e7fa      	b.n	80000ee <psloop>

080000f8 <endpsloop>:
 80000f8:	4919      	ldr	r1, [pc, #100]	; (8000160 <endfiniloop+0x18>)
 80000fa:	4a1a      	ldr	r2, [pc, #104]	; (8000164 <endfiniloop+0x1c>)
 80000fc:	4b1a      	ldr	r3, [pc, #104]	; (8000168 <endfiniloop+0x20>)

080000fe <dloop>:
 80000fe:	429a      	cmp	r2, r3
 8000100:	da04      	bge.n	800010c <enddloop>
 8000102:	6808      	ldr	r0, [r1, #0]
 8000104:	6010      	str	r0, [r2, #0]
 8000106:	3104      	adds	r1, #4
 8000108:	3204      	adds	r2, #4
 800010a:	e7f8      	b.n	80000fe <dloop>

0800010c <enddloop>:
 800010c:	2000      	movs	r0, #0
 800010e:	4917      	ldr	r1, [pc, #92]	; (800016c <endfiniloop+0x24>)
 8000110:	4a17      	ldr	r2, [pc, #92]	; (8000170 <endfiniloop+0x28>)

08000112 <bloop>:
 8000112:	4291      	cmp	r1, r2
 8000114:	da02      	bge.n	800011c <endbloop>
 8000116:	6008      	str	r0, [r1, #0]
 8000118:	3104      	adds	r1, #4
 800011a:	e7fa      	b.n	8000112 <bloop>

0800011c <endbloop>:
 800011c:	f000 fc20 	bl	8000960 <__init_ram_areas>
 8000120:	f000 fc56 	bl	80009d0 <__late_init>
 8000124:	4c13      	ldr	r4, [pc, #76]	; (8000174 <endfiniloop+0x2c>)
 8000126:	4d14      	ldr	r5, [pc, #80]	; (8000178 <endfiniloop+0x30>)

08000128 <initloop>:
 8000128:	42ac      	cmp	r4, r5
 800012a:	da03      	bge.n	8000134 <endinitloop>
 800012c:	6821      	ldr	r1, [r4, #0]
 800012e:	4788      	blx	r1
 8000130:	3404      	adds	r4, #4
 8000132:	e7f9      	b.n	8000128 <initloop>

08000134 <endinitloop>:
 8000134:	f000 f9ec 	bl	8000510 <main>
 8000138:	4c10      	ldr	r4, [pc, #64]	; (800017c <endfiniloop+0x34>)
 800013a:	4d11      	ldr	r5, [pc, #68]	; (8000180 <endfiniloop+0x38>)

0800013c <finiloop>:
 800013c:	42ac      	cmp	r4, r5
 800013e:	da03      	bge.n	8000148 <endfiniloop>
 8000140:	6821      	ldr	r1, [r4, #0]
 8000142:	4788      	blx	r1
 8000144:	3404      	adds	r4, #4
 8000146:	e7f9      	b.n	800013c <finiloop>

08000148 <endfiniloop>:
 8000148:	490e      	ldr	r1, [pc, #56]	; (8000184 <endfiniloop+0x3c>)
 800014a:	4708      	bx	r1
 800014c:	20000600 	.word	0x20000600
 8000150:	55555555 	.word	0x55555555
 8000154:	20000000 	.word	0x20000000
 8000158:	20000400 	.word	0x20000400
 800015c:	20000400 	.word	0x20000400
 8000160:	08000ad0 	.word	0x08000ad0
 8000164:	20000600 	.word	0x20000600
 8000168:	20000600 	.word	0x20000600
 800016c:	20000600 	.word	0x20000600
 8000170:	200008c0 	.word	0x200008c0
 8000174:	080000c0 	.word	0x080000c0
 8000178:	080000c0 	.word	0x080000c0
 800017c:	080000c0 	.word	0x080000c0
 8000180:	080000c0 	.word	0x080000c0
 8000184:	080009c1 	.word	0x080009c1
	...

08000190 <_port_switch>:
 8000190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000192:	4644      	mov	r4, r8
 8000194:	464d      	mov	r5, r9
 8000196:	4656      	mov	r6, sl
 8000198:	465f      	mov	r7, fp
 800019a:	b4f0      	push	{r4, r5, r6, r7}
 800019c:	466b      	mov	r3, sp
 800019e:	60cb      	str	r3, [r1, #12]
 80001a0:	68c3      	ldr	r3, [r0, #12]
 80001a2:	469d      	mov	sp, r3
 80001a4:	bcf0      	pop	{r4, r5, r6, r7}
 80001a6:	46a0      	mov	r8, r4
 80001a8:	46a9      	mov	r9, r5
 80001aa:	46b2      	mov	sl, r6
 80001ac:	46bb      	mov	fp, r7
 80001ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001b0 <_port_thread_start>:
 80001b0:	b662      	cpsie	i
 80001b2:	1c28      	adds	r0, r5, #0
 80001b4:	47a0      	blx	r4
 80001b6:	2000      	movs	r0, #0
 80001b8:	f000 fb82 	bl	80008c0 <chThdExit>

080001bc <_port_switch_from_isr>:
 80001bc:	f000 fbb0 	bl	8000920 <chSchDoReschedule>

080001c0 <_port_exit_from_isr>:
 80001c0:	4a01      	ldr	r2, [pc, #4]	; (80001c8 <_port_exit_from_isr+0x8>)
 80001c2:	4b02      	ldr	r3, [pc, #8]	; (80001cc <_port_exit_from_isr+0xc>)
 80001c4:	6013      	str	r3, [r2, #0]
 80001c6:	e7fe      	b.n	80001c6 <_port_exit_from_isr+0x6>
 80001c8:	e000ed04 	.word	0xe000ed04
 80001cc:	80000000 	.word	0x80000000

080001d0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80001d0:	e7fe      	b.n	80001d0 <_idle_thread>
 80001d2:	46c0      	nop			; (mov r8, r8)
	...

080001e0 <chCoreAlloc>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001e0:	b672      	cpsid	i
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 80001e2:	2207      	movs	r2, #7
 80001e4:	1dc3      	adds	r3, r0, #7
 80001e6:	4393      	bics	r3, r2
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 80001e8:	4906      	ldr	r1, [pc, #24]	; (8000204 <chCoreAlloc+0x24>)
 80001ea:	4a07      	ldr	r2, [pc, #28]	; (8000208 <chCoreAlloc+0x28>)
 80001ec:	6808      	ldr	r0, [r1, #0]
 80001ee:	6812      	ldr	r2, [r2, #0]
 80001f0:	1a12      	subs	r2, r2, r0
 80001f2:	4293      	cmp	r3, r2
 80001f4:	d803      	bhi.n	80001fe <chCoreAlloc+0x1e>
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 80001f6:	18c3      	adds	r3, r0, r3
 80001f8:	600b      	str	r3, [r1, #0]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80001fa:	b662      	cpsie	i
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 80001fc:	4770      	bx	lr

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 80001fe:	2000      	movs	r0, #0
 8000200:	e7fb      	b.n	80001fa <chCoreAlloc+0x1a>
 8000202:	46c0      	nop			; (mov r8, r8)
 8000204:	20000898 	.word	0x20000898
 8000208:	20000600 	.word	0x20000600
 800020c:	00000000 	.word	0x00000000

08000210 <NMI_Handler>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 8000210:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000214:	3320      	adds	r3, #32
 8000216:	f383 8809 	msr	PSP, r3
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800021a:	b662      	cpsie	i
  /* Writing back the modified PSP value.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <wakeup>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000220:	b672      	cpsid	i
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8000222:	7f03      	ldrb	r3, [r0, #28]
 8000224:	2b07      	cmp	r3, #7
 8000226:	d80c      	bhi.n	8000242 <wakeup+0x22>
 8000228:	4a11      	ldr	r2, [pc, #68]	; (8000270 <wakeup+0x50>)
 800022a:	009b      	lsls	r3, r3, #2
 800022c:	58d3      	ldr	r3, [r2, r3]
 800022e:	469f      	mov	pc, r3
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 8000230:	6a02      	ldr	r2, [r0, #32]
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 8000232:	6893      	ldr	r3, [r2, #8]
 8000234:	3301      	adds	r3, #1
 8000236:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 8000238:	6802      	ldr	r2, [r0, #0]
 800023a:	6843      	ldr	r3, [r0, #4]
 800023c:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800023e:	6802      	ldr	r2, [r0, #0]
 8000240:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 8000242:	2301      	movs	r3, #1
 8000244:	425b      	negs	r3, r3
 8000246:	6203      	str	r3, [r0, #32]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8000248:	2300      	movs	r3, #0
 800024a:	6882      	ldr	r2, [r0, #8]
 800024c:	7703      	strb	r3, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <wakeup+0x54>)
  do {
    cp = cp->p_next;
 8000250:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 8000252:	6899      	ldr	r1, [r3, #8]
 8000254:	4291      	cmp	r1, r2
 8000256:	d2fb      	bcs.n	8000250 <wakeup+0x30>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8000258:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800025a:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 800025c:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 800025e:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 8000260:	6058      	str	r0, [r3, #4]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000262:	b662      	cpsie	i
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 8000264:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 8000266:	2200      	movs	r2, #0
 8000268:	6a03      	ldr	r3, [r0, #32]
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	e7e9      	b.n	8000242 <wakeup+0x22>
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	080009f0 	.word	0x080009f0
 8000274:	20000750 	.word	0x20000750
	...

08000280 <BusFault_Handler>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 8000280:	e7fe      	b.n	8000280 <BusFault_Handler>
 8000282:	46c0      	nop			; (mov r8, r8)
	...

08000290 <chSchWakeupS.constprop.8>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8000290:	b570      	push	{r4, r5, r6, lr}
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000292:	2500      	movs	r5, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <chSchWakeupS.constprop.8+0x4c>)
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 8000296:	6205      	str	r5, [r0, #32]

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 8000298:	6999      	ldr	r1, [r3, #24]
 800029a:	6882      	ldr	r2, [r0, #8]
 800029c:	688c      	ldr	r4, [r1, #8]
 800029e:	42a2      	cmp	r2, r4
 80002a0:	d80a      	bhi.n	80002b8 <chSchWakeupS.constprop.8+0x28>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80002a2:	7705      	strb	r5, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80002a4:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80002a6:	6899      	ldr	r1, [r3, #8]
 80002a8:	428a      	cmp	r2, r1
 80002aa:	d9fb      	bls.n	80002a4 <chSchWakeupS.constprop.8+0x14>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80002ac:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80002ae:	6003      	str	r3, [r0, #0]
  tp->p_prev = cp->p_prev;
 80002b0:	6042      	str	r2, [r0, #4]
  tp->p_prev->p_next = tp;
 80002b2:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80002b4:	6058      	str	r0, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
  cp = (thread_t *)&ch.rlist.r_queue;
 80002b8:	001a      	movs	r2, r3
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80002ba:	770d      	strb	r5, [r1, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80002bc:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 80002be:	6895      	ldr	r5, [r2, #8]
 80002c0:	42ac      	cmp	r4, r5
 80002c2:	d9fb      	bls.n	80002bc <chSchWakeupS.constprop.8+0x2c>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80002c4:	6854      	ldr	r4, [r2, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80002c6:	600a      	str	r2, [r1, #0]
  tp->p_prev = cp->p_prev;
 80002c8:	604c      	str	r4, [r1, #4]
  tp->p_prev->p_next = tp;
 80002ca:	6021      	str	r1, [r4, #0]
  cp->p_prev = tp;
 80002cc:	6051      	str	r1, [r2, #4]
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 80002ce:	6198      	str	r0, [r3, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 80002d0:	2301      	movs	r3, #1
 80002d2:	7703      	strb	r3, [r0, #28]
    chSysSwitch(ntp, otp);
 80002d4:	f7ff ff5c 	bl	8000190 <_port_switch>
 80002d8:	e7ed      	b.n	80002b6 <chSchWakeupS.constprop.8+0x26>
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20000750 	.word	0x20000750

080002e0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <chSchGoSleepS+0x1c>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 80002e2:	b510      	push	{r4, lr}
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 80002e4:	6999      	ldr	r1, [r3, #24]
  otp->p_state = newstate;
 80002e6:	7708      	strb	r0, [r1, #28]
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80002e8:	6818      	ldr	r0, [r3, #0]

  tqp->p_next = tp->p_next;
 80002ea:	6802      	ldr	r2, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80002ec:	6053      	str	r3, [r2, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 80002ee:	601a      	str	r2, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80002f0:	6198      	str	r0, [r3, #24]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80002f2:	2301      	movs	r3, #1
 80002f4:	7703      	strb	r3, [r0, #28]
  chSysSwitch(currp, otp);
 80002f6:	f7ff ff4b 	bl	8000190 <_port_switch>
}
 80002fa:	bd10      	pop	{r4, pc}
 80002fc:	20000750 	.word	0x20000750

08000300 <chThdSleep.constprop.2>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	b086      	sub	sp, #24
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8000306:	4d3d      	ldr	r5, [pc, #244]	; (80003fc <chThdSleep.constprop.2+0xfc>)
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8000308:	ac01      	add	r4, sp, #4
 800030a:	69ab      	ldr	r3, [r5, #24]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800030c:	4e3c      	ldr	r6, [pc, #240]	; (8000400 <chThdSleep.constprop.2+0x100>)
 800030e:	6123      	str	r3, [r4, #16]
  vtp->vt_func = vtfunc;
 8000310:	4b3c      	ldr	r3, [pc, #240]	; (8000404 <chThdSleep.constprop.2+0x104>)
 8000312:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000314:	60e3      	str	r3, [r4, #12]
    if (delay < (systime_t)CH_CFG_ST_TIMEDELTA) {
      delay = (systime_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000316:	002b      	movs	r3, r5
 8000318:	69ea      	ldr	r2, [r5, #28]
 800031a:	331c      	adds	r3, #28
 800031c:	b280      	uxth	r0, r0
 800031e:	429a      	cmp	r2, r3
 8000320:	d057      	beq.n	80003d2 <chThdSleep.constprop.2+0xd2>
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000322:	4b39      	ldr	r3, [pc, #228]	; (8000408 <chThdSleep.constprop.2+0x108>)
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000324:	8911      	ldrh	r1, [r2, #8]
      return;
    }

    /* Special case where the timer will be placed as first element in a
       non-empty list, the alarm needs to be recalculated.*/
    delta = now + delay - ch.vtlist.vt_lasttime;
 8000326:	469c      	mov	ip, r3
 8000328:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 800032a:	4460      	add	r0, ip
 800032c:	b280      	uxth	r0, r0
 800032e:	1ac3      	subs	r3, r0, r3
 8000330:	b29b      	uxth	r3, r3
    if (delta < ch.vtlist.vt_next->vt_delta) {
 8000332:	428b      	cmp	r3, r1
 8000334:	d204      	bcs.n	8000340 <chThdSleep.constprop.2+0x40>
 8000336:	e02b      	b.n	8000390 <chThdSleep.constprop.2+0x90>
  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
    p = p->vt_next;
 8000338:	6812      	ldr	r2, [r2, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 800033a:	1a5b      	subs	r3, r3, r1
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800033c:	8911      	ldrh	r1, [r2, #8]
    delta -= p->vt_delta;
 800033e:	b29b      	uxth	r3, r3
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8000340:	4299      	cmp	r1, r3
 8000342:	d3f9      	bcc.n	8000338 <chThdSleep.constprop.2+0x38>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000344:	6851      	ldr	r1, [r2, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 8000346:	9201      	str	r2, [sp, #4]
  vtp->vt_prev = vtp->vt_next->vt_prev;
 8000348:	6061      	str	r1, [r4, #4]
  vtp->vt_prev->vt_next = vtp;
 800034a:	600c      	str	r4, [r1, #0]
  p->vt_prev = vtp;
 800034c:	6054      	str	r4, [r2, #4]
  vtp->vt_delta = delta
 800034e:	8123      	strh	r3, [r4, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8000350:	8911      	ldrh	r1, [r2, #8]
 8000352:	1acb      	subs	r3, r1, r3
 8000354:	8113      	strh	r3, [r2, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8000356:	2301      	movs	r3, #1
 8000358:	425b      	negs	r3, r3
 800035a:	84ab      	strh	r3, [r5, #36]	; 0x24
    chSchGoSleepS(newstate);
 800035c:	2008      	movs	r0, #8
 800035e:	f7ff ffbf 	bl	80002e0 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 8000362:	9b04      	ldr	r3, [sp, #16]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d010      	beq.n	800038a <chThdSleep.constprop.2+0x8a>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  systime_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
 8000368:	69eb      	ldr	r3, [r5, #28]
 800036a:	42a3      	cmp	r3, r4
 800036c:	d012      	beq.n	8000394 <chThdSleep.constprop.2+0x94>
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 800036e:	6862      	ldr	r2, [r4, #4]
 8000370:	9b01      	ldr	r3, [sp, #4]
    vtp->vt_next->vt_prev = vtp->vt_prev;
    vtp->vt_func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 8000372:	351c      	adds	r5, #28

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.vt_next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->vt_prev->vt_next = vtp->vt_next;
 8000374:	6013      	str	r3, [r2, #0]
    vtp->vt_next->vt_prev = vtp->vt_prev;
 8000376:	9b01      	ldr	r3, [sp, #4]
 8000378:	605a      	str	r2, [r3, #4]
    vtp->vt_func = NULL;
 800037a:	2200      	movs	r2, #0
 800037c:	60e2      	str	r2, [r4, #12]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->vt_next)
 800037e:	42ab      	cmp	r3, r5
 8000380:	d003      	beq.n	800038a <chThdSleep.constprop.2+0x8a>
      vtp->vt_next->vt_delta += vtp->vt_delta;
 8000382:	8919      	ldrh	r1, [r3, #8]
 8000384:	8922      	ldrh	r2, [r4, #8]
 8000386:	188a      	adds	r2, r1, r2
 8000388:	811a      	strh	r2, [r3, #8]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800038a:	b662      	cpsie	i

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 800038c:	b006      	add	sp, #24
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000390:	6370      	str	r0, [r6, #52]	; 0x34
 8000392:	e7d5      	b.n	8000340 <chThdSleep.constprop.2+0x40>
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000394:	002b      	movs	r3, r5
  vtp->vt_func = NULL;
 8000396:	2100      	movs	r1, #0

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 8000398:	6822      	ldr	r2, [r4, #0]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800039a:	331c      	adds	r3, #28

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.vt_next = vtp->vt_next;
 800039c:	61ea      	str	r2, [r5, #28]
  ch.vtlist.vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800039e:	6053      	str	r3, [r2, #4]
  vtp->vt_func = NULL;
 80003a0:	60e1      	str	r1, [r4, #12]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {
 80003a2:	429a      	cmp	r2, r3
 80003a4:	d027      	beq.n	80003f6 <chThdSleep.constprop.2+0xf6>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.vt_next->vt_delta += vtp->vt_delta;
 80003a6:	8911      	ldrh	r1, [r2, #8]
 80003a8:	8923      	ldrh	r3, [r4, #8]
 80003aa:	18cb      	adds	r3, r1, r3
 80003ac:	b29b      	uxth	r3, r3
 80003ae:	8113      	strh	r3, [r2, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <chThdSleep.constprop.2+0x100>)
 80003b2:	6a51      	ldr	r1, [r2, #36]	; 0x24
/*  if (ch.vtlist.vt_next->vt_delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chVTGetSystemTimeX() - ch.vtlist.vt_lasttime;
 80003b4:	8cea      	ldrh	r2, [r5, #38]	; 0x26
 80003b6:	b289      	uxth	r1, r1
 80003b8:	1a8a      	subs	r2, r1, r2
 80003ba:	b292      	uxth	r2, r2

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.vt_next->vt_delta) {
 80003bc:	4293      	cmp	r3, r2
 80003be:	d9e4      	bls.n	800038a <chThdSleep.constprop.2+0x8a>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;
 80003c0:	1a9a      	subs	r2, r3, r2
 80003c2:	b293      	uxth	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d914      	bls.n	80003f2 <chThdSleep.constprop.2+0xf2>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80003c8:	18cb      	adds	r3, r1, r3
 80003ca:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <chThdSleep.constprop.2+0x100>)
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	6353      	str	r3, [r2, #52]	; 0x34
 80003d0:	e7db      	b.n	800038a <chThdSleep.constprop.2+0x8a>
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <chThdSleep.constprop.2+0x108>)
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
 80003d4:	84e8      	strh	r0, [r5, #38]	; 0x26
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80003d6:	469c      	mov	ip, r3
      ch.vtlist.vt_next = vtp;
      ch.vtlist.vt_prev = vtp;
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
      vtp->vt_delta = delay;
 80003d8:	8123      	strh	r3, [r4, #8]
  STM32_ST_TIM->SR     = 0;
 80003da:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80003dc:	4460      	add	r0, ip
 80003de:	b280      	uxth	r0, r0
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.vt_next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.vt_lasttime = now;
      ch.vtlist.vt_next = vtp;
 80003e0:	61ec      	str	r4, [r5, #28]
      ch.vtlist.vt_prev = vtp;
 80003e2:	622c      	str	r4, [r5, #32]
      vtp->vt_next = (virtual_timer_t *)&ch.vtlist;
 80003e4:	9201      	str	r2, [sp, #4]
      vtp->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80003e6:	6062      	str	r2, [r4, #4]
 80003e8:	6370      	str	r0, [r6, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80003ea:	6133      	str	r3, [r6, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80003ec:	3302      	adds	r3, #2
 80003ee:	60f3      	str	r3, [r6, #12]
 80003f0:	e7b4      	b.n	800035c <chThdSleep.constprop.2+0x5c>
  delta = ch.vtlist.vt_next->vt_delta - nowdelta;

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80003f2:	2302      	movs	r3, #2
 80003f4:	e7e8      	b.n	80003c8 <chThdSleep.constprop.2+0xc8>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80003f6:	4b02      	ldr	r3, [pc, #8]	; (8000400 <chThdSleep.constprop.2+0x100>)
 80003f8:	60d9      	str	r1, [r3, #12]
 80003fa:	e7c6      	b.n	800038a <chThdSleep.constprop.2+0x8a>
 80003fc:	20000750 	.word	0x20000750
 8000400:	40000400 	.word	0x40000400
 8000404:	08000221 	.word	0x08000221
 8000408:	00001388 	.word	0x00001388
 800040c:	00000000 	.word	0x00000000

08000410 <Thread1>:

/*
 * Blue LED blinker thread, times are in milliseconds.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  (void)arg;
  chRegSetThreadName("ledflash");
  while (true) {
    palClearPad(GPIOA, GPIOA_ROW_FET_1);
 8000412:	2680      	movs	r6, #128	; 0x80
 8000414:	2490      	movs	r4, #144	; 0x90
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000416:	4b08      	ldr	r3, [pc, #32]	; (8000438 <Thread1+0x28>)
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <Thread1+0x2c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	0176      	lsls	r6, r6, #5
 800041e:	619a      	str	r2, [r3, #24]
 8000420:	05e4      	lsls	r4, r4, #23
 8000422:	1c37      	adds	r7, r6, #0
    palClearPad(GPIOA, GPIOA_COL_FET_1);
 8000424:	2501      	movs	r5, #1
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("ledflash");
  while (true) {
    palClearPad(GPIOA, GPIOA_ROW_FET_1);
 8000426:	8367      	strh	r7, [r4, #26]
    palClearPad(GPIOA, GPIOA_COL_FET_1);
 8000428:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(500);
 800042a:	f7ff ff69 	bl	8000300 <chThdSleep.constprop.2>
    palSetPad(GPIOA, GPIOA_ROW_FET_1);
 800042e:	8326      	strh	r6, [r4, #24]
    palSetPad(GPIOA, GPIOA_COL_FET_1);
 8000430:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(500);
 8000432:	f7ff ff65 	bl	8000300 <chThdSleep.constprop.2>
 8000436:	e7f5      	b.n	8000424 <Thread1+0x14>
 8000438:	20000750 	.word	0x20000750
 800043c:	08000a30 	.word	0x08000a30

08000440 <Vector80>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	464f      	mov	r7, r9
 8000444:	4646      	mov	r6, r8
 8000446:	b4c0      	push	{r6, r7}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000448:	4e2d      	ldr	r6, [pc, #180]	; (8000500 <Vector80+0xc0>)
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 800044a:	46f1      	mov	r9, lr

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800044c:	6933      	ldr	r3, [r6, #16]
 800044e:	079b      	lsls	r3, r3, #30
 8000450:	d41b      	bmi.n	800048a <Vector80+0x4a>
 *
 * @param[in] lr        value of the @p LR register on ISR entry
 */
void _port_irq_epilogue(regarm_t lr) {

  if (lr != (regarm_t)0xFFFFFFF1U) {
 8000452:	464b      	mov	r3, r9
 8000454:	330f      	adds	r3, #15
 8000456:	d011      	beq.n	800047c <Vector80+0x3c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000458:	b672      	cpsid	i
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800045a:	f3ef 8309 	mrs	r3, PSP

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800045e:	3b20      	subs	r3, #32
 8000460:	f383 8809 	msr	PSP, r3

    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	0452      	lsls	r2, r2, #17
 8000468:	61da      	str	r2, [r3, #28]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800046a:	4a26      	ldr	r2, [pc, #152]	; (8000504 <Vector80+0xc4>)
 800046c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->p_prio;
 800046e:	6992      	ldr	r2, [r2, #24]

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8000470:	6889      	ldr	r1, [r1, #8]
 8000472:	6892      	ldr	r2, [r2, #8]
 8000474:	4291      	cmp	r1, r2
 8000476:	d805      	bhi.n	8000484 <Vector80+0x44>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8000478:	4a23      	ldr	r2, [pc, #140]	; (8000508 <Vector80+0xc8>)
 800047a:	619a      	str	r2, [r3, #24]
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
}
 800047c:	bc0c      	pop	{r2, r3}
 800047e:	4690      	mov	r8, r2
 8000480:	4699      	mov	r9, r3
 8000482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8000484:	4a21      	ldr	r2, [pc, #132]	; (800050c <Vector80+0xcc>)
 8000486:	619a      	str	r2, [r3, #24]
 8000488:	e7f8      	b.n	800047c <Vector80+0x3c>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 800048a:	2300      	movs	r3, #0
 800048c:	6133      	str	r3, [r6, #16]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048e:	b672      	cpsid	i
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  virtual_timer_t *vtp;
  systime_t now, delta;

  /* First timer to be processed.*/
  vtp = ch.vtlist.vt_next;
 8000490:	4c1c      	ldr	r4, [pc, #112]	; (8000504 <Vector80+0xc4>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000492:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8000494:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 8000496:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
 8000498:	b280      	uxth	r0, r0
 800049a:	1bc1      	subs	r1, r0, r7
 800049c:	891a      	ldrh	r2, [r3, #8]
 800049e:	b289      	uxth	r1, r1
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d31a      	bcc.n	80004da <Vector80+0x9a>
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80004a4:	2100      	movs	r1, #0
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004a6:	0025      	movs	r5, r4
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80004a8:	4688      	mov	r8, r1
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004aa:	351c      	adds	r5, #28
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80004ac:	4640      	mov	r0, r8
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;
 80004ae:	19d2      	adds	r2, r2, r7
 80004b0:	84e2      	strh	r2, [r4, #38]	; 0x26

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004b2:	681a      	ldr	r2, [r3, #0]
    ch.vtlist.vt_next = vtp->vt_next;
    fn = vtp->vt_func;
 80004b4:	68d9      	ldr	r1, [r3, #12]
    vtfunc_t fn;

    /* The "last time" becomes this timer's expiration time.*/
    ch.vtlist.vt_lasttime += vtp->vt_delta;

    vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 80004b6:	6055      	str	r5, [r2, #4]
    ch.vtlist.vt_next = vtp->vt_next;
 80004b8:	61e2      	str	r2, [r4, #28]
    fn = vtp->vt_func;
    vtp->vt_func = NULL;
 80004ba:	60d8      	str	r0, [r3, #12]

    /* if the list becomes empty then the timer is stopped.*/
    if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004bc:	42aa      	cmp	r2, r5
 80004be:	d01a      	beq.n	80004f6 <Vector80+0xb6>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004c0:	b662      	cpsie	i
       and in order to give a preemption chance to higher priority
       interrupts.*/
    chSysUnlockFromISR();

    /* The callback is invoked outside the kernel critical zone.*/
    fn(vtp->vt_par);
 80004c2:	6918      	ldr	r0, [r3, #16]
 80004c4:	4788      	blx	r1
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c6:	b672      	cpsid	i
 80004c8:	6a70      	ldr	r0, [r6, #36]	; 0x24
       of the list.*/
    chSysLockFromISR();

    /* Next element in the list, the current time could have advanced so
       recalculating the time window.*/
    vtp = ch.vtlist.vt_next;
 80004ca:	69e3      	ldr	r3, [r4, #28]

  /* All timers within the time window are triggered and removed,
     note that the loop is stopped by the timers header having
     "ch.vtlist.vt_delta == (systime_t)-1" which is greater than
     all deltas.*/
  while (vtp->vt_delta <= (systime_t)(now - ch.vtlist.vt_lasttime)) {
 80004cc:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
 80004ce:	b280      	uxth	r0, r0
 80004d0:	1bc1      	subs	r1, r0, r7
 80004d2:	891a      	ldrh	r2, [r3, #8]
 80004d4:	b289      	uxth	r1, r1
 80004d6:	428a      	cmp	r2, r1
 80004d8:	d9e8      	bls.n	80004ac <Vector80+0x6c>
    vtp = ch.vtlist.vt_next;
    now = chVTGetSystemTimeX();
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.vt_next == (virtual_timer_t *)&ch.vtlist) {
 80004da:	341c      	adds	r4, #28
 80004dc:	42a3      	cmp	r3, r4
 80004de:	d008      	beq.n	80004f2 <Vector80+0xb2>
    return;
  }

  /* Recalculating the next alarm time.*/
  delta = ch.vtlist.vt_lasttime + vtp->vt_delta - now;
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	1a13      	subs	r3, r2, r0
 80004e4:	b29a      	uxth	r2, r3
  if (delta < (systime_t)CH_CFG_ST_TIMEDELTA) {
 80004e6:	2a01      	cmp	r2, #1
 80004e8:	d907      	bls.n	80004fa <Vector80+0xba>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80004ea:	1812      	adds	r2, r2, r0
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <Vector80+0xc0>)
 80004ee:	b292      	uxth	r2, r2
 80004f0:	635a      	str	r2, [r3, #52]	; 0x34
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004f2:	b662      	cpsie	i
 80004f4:	e7ad      	b.n	8000452 <Vector80+0x12>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80004f6:	60f0      	str	r0, [r6, #12]
 80004f8:	e7e2      	b.n	80004c0 <Vector80+0x80>
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
 80004fa:	2202      	movs	r2, #2
 80004fc:	e7f5      	b.n	80004ea <Vector80+0xaa>
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40000400 	.word	0x40000400
 8000504:	20000750 	.word	0x20000750
 8000508:	080001c0 	.word	0x080001c0
 800050c:	080001bd 	.word	0x080001bd

08000510 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @notapi
 */
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
 8000512:	4ba0      	ldr	r3, [pc, #640]	; (8000794 <main+0x284>)
 8000514:	2101      	movs	r1, #1
 8000516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000518:	4644      	mov	r4, r8
 800051a:	2200      	movs	r2, #0
 800051c:	465f      	mov	r7, fp
 800051e:	4656      	mov	r6, sl
 8000520:	464d      	mov	r5, r9
 8000522:	4249      	negs	r1, r1
 8000524:	b4f0      	push	{r4, r5, r6, r7}
 8000526:	6299      	str	r1, [r3, #40]	; 0x28
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 800052a:	6918      	ldr	r0, [r3, #16]
 800052c:	6119      	str	r1, [r3, #16]
 800052e:	611a      	str	r2, [r3, #16]
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8000530:	68d9      	ldr	r1, [r3, #12]
 8000532:	4899      	ldr	r0, [pc, #612]	; (8000798 <main+0x288>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000534:	2480      	movs	r4, #128	; 0x80
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 8000536:	4301      	orrs	r1, r0

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000538:	2080      	movs	r0, #128	; 0x80
void hal_lld_init(void) {

  /* Reset of all peripherals.*/
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);
 800053a:	60d9      	str	r1, [r3, #12]
 800053c:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800053e:	69d9      	ldr	r1, [r3, #28]
 8000540:	0540      	lsls	r0, r0, #21
 8000542:	4301      	orrs	r1, r0
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000544:	4895      	ldr	r0, [pc, #596]	; (800079c <main+0x28c>)
  rccResetAHB(0xFFFFFFFF);
  rccResetAPB1(0xFFFFFFFF);
  rccResetAPB2(~RCC_APB2RSTR_DBGMCURST);

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8000546:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8000548:	6801      	ldr	r1, [r0, #0]
 800054a:	0064      	lsls	r4, r4, #1
 800054c:	4321      	orrs	r1, r4
 800054e:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 8000550:	21c0      	movs	r1, #192	; 0xc0
 8000552:	6a18      	ldr	r0, [r3, #32]
 8000554:	0089      	lsls	r1, r1, #2
 8000556:	4001      	ands	r1, r0
 8000558:	2080      	movs	r0, #128	; 0x80
 800055a:	0080      	lsls	r0, r0, #2
 800055c:	4281      	cmp	r1, r0
 800055e:	d003      	beq.n	8000568 <main+0x58>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8000560:	2180      	movs	r1, #128	; 0x80
 8000562:	0249      	lsls	r1, r1, #9
 8000564:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 8000566:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 8000568:	2080      	movs	r0, #128	; 0x80
 800056a:	4b8a      	ldr	r3, [pc, #552]	; (8000794 <main+0x284>)
 800056c:	0200      	lsls	r0, r0, #8
 800056e:	6a1a      	ldr	r2, [r3, #32]
 8000570:	4202      	tst	r2, r0
 8000572:	d107      	bne.n	8000584 <main+0x74>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8000574:	2280      	movs	r2, #128	; 0x80
 8000576:	6a19      	ldr	r1, [r3, #32]
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	4311      	orrs	r1, r2
 800057c:	6219      	str	r1, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800057e:	6a1a      	ldr	r2, [r3, #32]
 8000580:	4302      	orrs	r2, r0
 8000582:	621a      	str	r2, [r3, #32]
  RCC->IOPSMENR |= AHB_LPEN_MASK;
#elif defined(STM32L1XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 8000584:	22bc      	movs	r2, #188	; 0xbc
 8000586:	4983      	ldr	r1, [pc, #524]	; (8000794 <main+0x284>)
 8000588:	03d2      	lsls	r2, r2, #15
 800058a:	694b      	ldr	r3, [r1, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800058c:	2500      	movs	r5, #0
  RCC->IOPSMENR |= AHB_LPEN_MASK;
#elif defined(STM32L1XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
  RCC->AHBLPENR |= AHB_LPEN_MASK;
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
 800058e:	4313      	orrs	r3, r2
 8000590:	614b      	str	r3, [r1, #20]
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 8000592:	2201      	movs	r2, #1
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000594:	2390      	movs	r3, #144	; 0x90
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000596:	4882      	ldr	r0, [pc, #520]	; (80007a0 <main+0x290>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000598:	05db      	lsls	r3, r3, #23
  gpiop->OSPEEDR = config->ospeedr;
 800059a:	4252      	negs	r2, r2
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800059c:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800059e:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80005a0:	60d8      	str	r0, [r3, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80005a2:	4880      	ldr	r0, [pc, #512]	; (80007a4 <main+0x294>)
static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80005a4:	615d      	str	r5, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80005a6:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80005a8:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80005aa:	6018      	str	r0, [r3, #0]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80005ac:	2080      	movs	r0, #128	; 0x80
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80005ae:	4b7e      	ldr	r3, [pc, #504]	; (80007a8 <main+0x298>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80005b0:	05c0      	lsls	r0, r0, #23
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80005b2:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80005b4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80005b6:	60d8      	str	r0, [r3, #12]
  gpiop->ODR     = config->odr;
 80005b8:	615d      	str	r5, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80005ba:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80005bc:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80005be:	6018      	str	r0, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80005c0:	4b7a      	ldr	r3, [pc, #488]	; (80007ac <main+0x29c>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80005c2:	487b      	ldr	r0, [pc, #492]	; (80007b0 <main+0x2a0>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80005c4:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80005c6:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80005c8:	60d8      	str	r0, [r3, #12]
  gpiop->ODR     = config->odr;
 80005ca:	615d      	str	r5, [r3, #20]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80005cc:	4879      	ldr	r0, [pc, #484]	; (80007b4 <main+0x2a4>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80005ce:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80005d0:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80005d2:	601d      	str	r5, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80005d4:	4b78      	ldr	r3, [pc, #480]	; (80007b8 <main+0x2a8>)
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  STM32_ST_TIM->CCMR1  = 0;
  STM32_ST_TIM->CCR[0] = 0;
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80005d6:	2601      	movs	r6, #1
 80005d8:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80005da:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80005dc:	60d8      	str	r0, [r3, #12]
  gpiop->ODR     = config->odr;
 80005de:	615d      	str	r5, [r3, #20]

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80005e0:	4876      	ldr	r0, [pc, #472]	; (80007bc <main+0x2ac>)
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80005e2:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80005e4:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80005e6:	601d      	str	r5, [r3, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80005e8:	4b75      	ldr	r3, [pc, #468]	; (80007c0 <main+0x2b0>)
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
 80005ea:	24c4      	movs	r4, #196	; 0xc4
 80005ec:	605d      	str	r5, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80005ee:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 80005f0:	60d8      	str	r0, [r3, #12]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80005f2:	2002      	movs	r0, #2
  gpiop->ODR     = config->odr;
 80005f4:	615d      	str	r5, [r3, #20]
  gpiop->AFRL    = config->afrl;
 80005f6:	621d      	str	r5, [r3, #32]
  gpiop->AFRH    = config->afrh;
 80005f8:	625d      	str	r5, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80005fa:	601d      	str	r5, [r3, #0]
 80005fc:	69cb      	ldr	r3, [r1, #28]
 80005fe:	4680      	mov	r8, r0
 8000600:	4303      	orrs	r3, r0
 8000602:	61cb      	str	r3, [r1, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8000604:	496f      	ldr	r1, [pc, #444]	; (80007c4 <main+0x2b4>)
 8000606:	00a4      	lsls	r4, r4, #2
 8000608:	688b      	ldr	r3, [r1, #8]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800060a:	2740      	movs	r7, #64	; 0x40
 800060c:	4303      	orrs	r3, r0
 800060e:	608b      	str	r3, [r1, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8000610:	4b6d      	ldr	r3, [pc, #436]	; (80007c8 <main+0x2b8>)
 8000612:	496e      	ldr	r1, [pc, #440]	; (80007cc <main+0x2bc>)
 8000614:	486e      	ldr	r0, [pc, #440]	; (80007d0 <main+0x2c0>)
 8000616:	6299      	str	r1, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8000618:	496e      	ldr	r1, [pc, #440]	; (80007d4 <main+0x2c4>)
 800061a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800061c:	21ff      	movs	r1, #255	; 0xff
  STM32_ST_TIM->CCMR1  = 0;
 800061e:	619d      	str	r5, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8000620:	635d      	str	r5, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8000622:	60dd      	str	r5, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8000624:	605d      	str	r5, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8000626:	615e      	str	r6, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8000628:	601e      	str	r6, [r3, #0]
 800062a:	5903      	ldr	r3, [r0, r4]
 800062c:	438b      	bics	r3, r1
 800062e:	397f      	subs	r1, #127	; 0x7f
 8000630:	430b      	orrs	r3, r1
 8000632:	5103      	str	r3, [r0, r4]
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	3c91      	subs	r4, #145	; 0x91
 8000638:	025b      	lsls	r3, r3, #9
 800063a:	3cff      	subs	r4, #255	; 0xff
 800063c:	5103      	str	r3, [r0, r4]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800063e:	6003      	str	r3, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)(IRQn) < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000640:	4865      	ldr	r0, [pc, #404]	; (80007d8 <main+0x2c8>)
 8000642:	4b66      	ldr	r3, [pc, #408]	; (80007dc <main+0x2cc>)
 8000644:	6a04      	ldr	r4, [r0, #32]
 8000646:	4023      	ands	r3, r4
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000648:	4c65      	ldr	r4, [pc, #404]	; (80007e0 <main+0x2d0>)
 800064a:	6203      	str	r3, [r0, #32]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800064c:	0023      	movs	r3, r4
 800064e:	331c      	adds	r3, #28
 8000650:	61e3      	str	r3, [r4, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000652:	6223      	str	r3, [r4, #32]
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 8000654:	2300      	movs	r3, #0
 8000656:	4699      	mov	r9, r3
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8000658:	4b62      	ldr	r3, [pc, #392]	; (80007e4 <main+0x2d4>)
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800065a:	84a2      	strh	r2, [r4, #36]	; 0x24
 800065c:	4862      	ldr	r0, [pc, #392]	; (80007e8 <main+0x2d8>)
 800065e:	3208      	adds	r2, #8
 8000660:	3307      	adds	r3, #7
 8000662:	4393      	bics	r3, r2
 8000664:	6024      	str	r4, [r4, #0]
  tqp->p_prev = (thread_t *)tqp;
 8000666:	6064      	str	r4, [r4, #4]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8000668:	60a5      	str	r5, [r4, #8]
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
 800066a:	84e5      	strh	r5, [r4, #38]	; 0x26
 800066c:	6003      	str	r3, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800066e:	4b5f      	ldr	r3, [pc, #380]	; (80007ec <main+0x2dc>)
 8000670:	6367      	str	r7, [r4, #52]	; 0x34
 8000672:	4393      	bics	r3, r2
 8000674:	4a5e      	ldr	r2, [pc, #376]	; (80007f0 <main+0x2e0>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8000676:	66a7      	str	r7, [r4, #104]	; 0x68
 8000678:	6013      	str	r3, [r2, #0]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800067a:	4b5e      	ldr	r3, [pc, #376]	; (80007f4 <main+0x2e4>)
 800067c:	4a5e      	ldr	r2, [pc, #376]	; (80007f8 <main+0x2e8>)
  default_heap.h_free.h.u.next = NULL;
 800067e:	609d      	str	r5, [r3, #8]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8000680:	601a      	str	r2, [r3, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000682:	001a      	movs	r2, r3
 8000684:	3210      	adds	r2, #16
 8000686:	611a      	str	r2, [r3, #16]
  tqp->p_prev = (thread_t *)tqp;
 8000688:	615a      	str	r2, [r3, #20]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
 800068a:	60dd      	str	r5, [r3, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800068c:	464a      	mov	r2, r9
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800068e:	619d      	str	r5, [r3, #24]
 8000690:	2349      	movs	r3, #73	; 0x49
 8000692:	54e2      	strb	r2, [r4, r3]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000694:	3301      	adds	r3, #1
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000696:	0022      	movs	r2, r4
 8000698:	54e6      	strb	r6, [r4, r3]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800069a:	0023      	movs	r3, r4
 800069c:	3250      	adds	r2, #80	; 0x50
 800069e:	332c      	adds	r3, #44	; 0x2c
 80006a0:	6522      	str	r2, [r4, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80006a2:	0022      	movs	r2, r4
 80006a4:	6123      	str	r3, [r4, #16]
 80006a6:	6163      	str	r3, [r4, #20]
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 80006a8:	61a3      	str	r3, [r4, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 80006aa:	2348      	movs	r3, #72	; 0x48
 80006ac:	3254      	adds	r2, #84	; 0x54
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80006ae:	6665      	str	r5, [r4, #100]	; 0x64
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80006b0:	6625      	str	r5, [r4, #96]	; 0x60
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80006b2:	6465      	str	r5, [r4, #68]	; 0x44
  REG_INSERT(tp);
 80006b4:	63e4      	str	r4, [r4, #60]	; 0x3c
 80006b6:	6424      	str	r4, [r4, #64]	; 0x40
 80006b8:	6562      	str	r2, [r4, #84]	; 0x54
  tqp->p_prev = (thread_t *)tqp;
 80006ba:	65a2      	str	r2, [r4, #88]	; 0x58
 80006bc:	54e6      	strb	r6, [r4, r3]
 80006be:	b662      	cpsie	i
 80006c0:	4a4e      	ldr	r2, [pc, #312]	; (80007fc <main+0x2ec>)
 80006c2:	69a3      	ldr	r3, [r4, #24]
 80006c4:	619a      	str	r2, [r3, #24]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c6:	b672      	cpsid	i

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80006c8:	0023      	movs	r3, r4
 80006ca:	3325      	adds	r3, #37	; 0x25
 80006cc:	33ff      	adds	r3, #255	; 0xff
 80006ce:	67e3      	str	r3, [r4, #124]	; 0x7c
 80006d0:	239a      	movs	r3, #154	; 0x9a
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	469a      	mov	sl, r3
 80006d6:	4652      	mov	r2, sl
 80006d8:	4b49      	ldr	r3, [pc, #292]	; (8000800 <main+0x2f0>)
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80006da:	0020      	movs	r0, r4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80006dc:	50a3      	str	r3, [r4, r2]
 80006de:	239c      	movs	r3, #156	; 0x9c
 80006e0:	4a48      	ldr	r2, [pc, #288]	; (8000804 <main+0x2f4>)
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	50e5      	str	r5, [r4, r3]
 80006e6:	330c      	adds	r3, #12
 80006e8:	50e2      	str	r2, [r4, r3]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80006ea:	4642      	mov	r2, r8
 80006ec:	3bb8      	subs	r3, #184	; 0xb8
 80006ee:	54e2      	strb	r2, [r4, r3]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80006f0:	464a      	mov	r2, r9
 80006f2:	3301      	adds	r3, #1
 80006f4:	54e2      	strb	r2, [r4, r3]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80006f6:	2284      	movs	r2, #132	; 0x84
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80006f8:	331f      	adds	r3, #31
 80006fa:	50e6      	str	r6, [r4, r3]
  tp->p_mtxlist = NULL;
 80006fc:	3b04      	subs	r3, #4
 80006fe:	50e5      	str	r5, [r4, r3]
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8000700:	3b04      	subs	r3, #4
 8000702:	50e5      	str	r5, [r4, r3]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8000704:	3b16      	subs	r3, #22
 8000706:	54e6      	strb	r6, [r4, r3]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8000708:	3b06      	subs	r3, #6
 800070a:	50e5      	str	r5, [r4, r3]
 800070c:	469b      	mov	fp, r3
  REG_INSERT(tp);
 800070e:	6963      	ldr	r3, [r4, #20]
 8000710:	3070      	adds	r0, #112	; 0x70
 8000712:	50a3      	str	r3, [r4, r2]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000714:	0022      	movs	r2, r4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8000716:	67a6      	str	r6, [r4, #120]	; 0x78
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000718:	5064      	str	r4, [r4, r1]
 800071a:	6118      	str	r0, [r3, #16]
 800071c:	2394      	movs	r3, #148	; 0x94
 800071e:	3294      	adds	r2, #148	; 0x94
 8000720:	50e2      	str	r2, [r4, r3]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8000722:	0023      	movs	r3, r4
 8000724:	2298      	movs	r2, #152	; 0x98
 8000726:	3398      	adds	r3, #152	; 0x98
 8000728:	50a3      	str	r3, [r4, r2]
  tqp->p_prev = (thread_t *)tqp;
 800072a:	3204      	adds	r2, #4
 800072c:	50a3      	str	r3, [r4, r2]
 800072e:	6160      	str	r0, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000730:	f7ff fdae 	bl	8000290 <chSchWakeupS.constprop.8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000734:	b662      	cpsie	i
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000736:	465a      	mov	r2, fp
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <main+0x2f8>)
 800073a:	50a3      	str	r3, [r4, r2]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800073e:	4833      	ldr	r0, [pc, #204]	; (800080c <main+0x2fc>)
 8000740:	4652      	mov	r2, sl
 8000742:	0003      	movs	r3, r0
 8000744:	3325      	adds	r3, #37	; 0x25
 8000746:	33ff      	adds	r3, #255	; 0xff
 8000748:	60c3      	str	r3, [r0, #12]
 800074a:	4b31      	ldr	r3, [pc, #196]	; (8000810 <main+0x300>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 800074c:	63c7      	str	r7, [r0, #60]	; 0x3c

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800074e:	5083      	str	r3, [r0, r2]
 8000750:	239c      	movs	r3, #156	; 0x9c
 8000752:	4a2c      	ldr	r2, [pc, #176]	; (8000804 <main+0x2f4>)
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	50c5      	str	r5, [r0, r3]
 8000758:	330c      	adds	r3, #12
 800075a:	50c2      	str	r2, [r0, r3]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800075c:	4643      	mov	r3, r8
 800075e:	7703      	strb	r3, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8000760:	464b      	mov	r3, r9
 8000762:	7743      	strb	r3, [r0, #29]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000764:	6963      	ldr	r3, [r4, #20]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8000766:	6385      	str	r5, [r0, #56]	; 0x38
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000768:	6143      	str	r3, [r0, #20]
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 800076a:	6345      	str	r5, [r0, #52]	; 0x34
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800076c:	7786      	strb	r6, [r0, #30]
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800076e:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 8000770:	6104      	str	r4, [r0, #16]
 8000772:	6118      	str	r0, [r3, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8000774:	0003      	movs	r3, r0
 8000776:	3324      	adds	r3, #36	; 0x24
 8000778:	6243      	str	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 800077a:	0003      	movs	r3, r0
 800077c:	3328      	adds	r3, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800077e:	6087      	str	r7, [r0, #8]
 8000780:	6283      	str	r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 8000782:	62c3      	str	r3, [r0, #44]	; 0x2c
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8000784:	6160      	str	r0, [r4, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8000786:	f7ff fd83 	bl	8000290 <chSchWakeupS.constprop.8>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800078a:	b662      	cpsie	i
   * sleeping in a loop and check the button state, when the button is
   * pressed the test procedure is launched with output on the serial
   * driver 1.
   */
  while (true) {
    chThdSleepMilliseconds(500);
 800078c:	f7ff fdb8 	bl	8000300 <chThdSleep.constprop.2>
 8000790:	e7fc      	b.n	800078c <main+0x27c>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000
 8000798:	ffbfffff 	.word	0xffbfffff
 800079c:	40007000 	.word	0x40007000
 80007a0:	65455555 	.word	0x65455555
 80007a4:	55455555 	.word	0x55455555
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48000800 	.word	0x48000800
 80007b0:	01555555 	.word	0x01555555
 80007b4:	55555555 	.word	0x55555555
 80007b8:	48000c00 	.word	0x48000c00
 80007bc:	55550550 	.word	0x55550550
 80007c0:	48001400 	.word	0x48001400
 80007c4:	40015800 	.word	0x40015800
 80007c8:	40000400 	.word	0x40000400
 80007cc:	000012bf 	.word	0x000012bf
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	0000ffff 	.word	0x0000ffff
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	ff00ffff 	.word	0xff00ffff
 80007e0:	20000750 	.word	0x20000750
 80007e4:	200008c0 	.word	0x200008c0
 80007e8:	20000898 	.word	0x20000898
 80007ec:	20002000 	.word	0x20002000
 80007f0:	20000600 	.word	0x20000600
 80007f4:	200008a0 	.word	0x200008a0
 80007f8:	080001e1 	.word	0x080001e1
 80007fc:	08000a10 	.word	0x08000a10
 8000800:	080001d1 	.word	0x080001d1
 8000804:	080001b1 	.word	0x080001b1
 8000808:	08000a3c 	.word	0x08000a3c
 800080c:	20000608 	.word	0x20000608
 8000810:	08000411 	.word	0x08000411
	...

08000820 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000820:	2301      	movs	r3, #1
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000822:	2002      	movs	r0, #2
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8000824:	4922      	ldr	r1, [pc, #136]	; (80008b0 <__early_init+0x90>)
 8000826:	680a      	ldr	r2, [r1, #0]
 8000828:	4313      	orrs	r3, r2
 800082a:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800082c:	680a      	ldr	r2, [r1, #0]
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <__early_init+0x90>)
 8000830:	4210      	tst	r0, r2
 8000832:	d0fb      	beq.n	800082c <__early_init+0xc>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8000834:	2103      	movs	r1, #3
 8000836:	685a      	ldr	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000838:	200c      	movs	r0, #12
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800083a:	438a      	bics	r2, r1
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800083c:	0019      	movs	r1, r3
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800083e:	605a      	str	r2, [r3, #4]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8000840:	685a      	ldr	r2, [r3, #4]
 8000842:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000844:	684b      	ldr	r3, [r1, #4]
 8000846:	4a1a      	ldr	r2, [pc, #104]	; (80008b0 <__early_init+0x90>)
 8000848:	4003      	ands	r3, r0
 800084a:	d1fb      	bne.n	8000844 <__early_init+0x24>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800084c:	20f9      	movs	r0, #249	; 0xf9
 800084e:	6811      	ldr	r1, [r2, #0]
 8000850:	4001      	ands	r1, r0
 8000852:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000854:	6053      	str	r3, [r2, #4]
    ;                                       /* Waits until HSI48 is stable. */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8000856:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000858:	3301      	adds	r3, #1
 800085a:	430b      	orrs	r3, r1
 800085c:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800085e:	38f7      	subs	r0, #247	; 0xf7
 8000860:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <__early_init+0x90>)
 8000864:	4208      	tst	r0, r1
 8000866:	d0fb      	beq.n	8000860 <__early_init+0x40>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
 8000868:	22a0      	movs	r2, #160	; 0xa0
 800086a:	0392      	lsls	r2, r2, #14
 800086c:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE;
  RCC->CFGR2 = STM32_PREDIV;
 800086e:	2200      	movs	r2, #0
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8000870:	2180      	movs	r1, #128	; 0x80
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000872:	2080      	movs	r0, #128	; 0x80
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_PLLNODIV | STM32_MCOPRE | STM32_MCOSEL | STM32_PLLMUL |
               STM32_PLLSRC   | STM32_PPRE   | STM32_HPRE;
  RCC->CFGR2 = STM32_PREDIV;
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
#if STM32_CECSW == STM32_CECSW_OFF
  RCC->CFGR3 = STM32_USBSW  | STM32_I2C1SW | STM32_USART1SW;
#else
  RCC->CFGR3 = STM32_USBSW  | STM32_CECSW  | STM32_I2C1SW | STM32_USART1SW;
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	0449      	lsls	r1, r1, #17
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000880:	0480      	lsls	r0, r0, #18
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <__early_init+0x90>)
 8000886:	4201      	tst	r1, r0
 8000888:	d0fb      	beq.n	8000882 <__early_init+0x62>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800088a:	2111      	movs	r1, #17
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <__early_init+0x94>)

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800088e:	200c      	movs	r0, #12
  while (!(RCC->CR & RCC_CR_PLLRDY))
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 8000890:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8000892:	2302      	movs	r3, #2
 8000894:	6851      	ldr	r1, [r2, #4]
 8000896:	430b      	orrs	r3, r1
 8000898:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800089a:	6853      	ldr	r3, [r2, #4]
 800089c:	4904      	ldr	r1, [pc, #16]	; (80008b0 <__early_init+0x90>)
 800089e:	4003      	ands	r3, r0
 80008a0:	2b08      	cmp	r3, #8
 80008a2:	d1fa      	bne.n	800089a <__early_init+0x7a>
    ;                                       /* Waits selection complete.    */
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 80008a4:	698a      	ldr	r2, [r1, #24]
 80008a6:	3b07      	subs	r3, #7
 80008a8:	4313      	orrs	r3, r2
 80008aa:	618b      	str	r3, [r1, #24]
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 80008ac:	4770      	bx	lr
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40022000 	.word	0x40022000
	...

080008c0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c2:	b672      	cpsid	i
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 80008c4:	4d12      	ldr	r5, [pc, #72]	; (8000910 <chThdExit+0x50>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80008c6:	2600      	movs	r6, #0
 80008c8:	69ac      	ldr	r4, [r5, #24]

  tp->p_u.exitcode = msg;
 80008ca:	6220      	str	r0, [r4, #32]
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 80008cc:	0020      	movs	r0, r4
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80008ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008d0:	3024      	adds	r0, #36	; 0x24
 80008d2:	4288      	cmp	r0, r1
 80008d4:	d010      	beq.n	80008f8 <chThdExit+0x38>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 80008d6:	680b      	ldr	r3, [r1, #0]
 80008d8:	688a      	ldr	r2, [r1, #8]
 80008da:	6263      	str	r3, [r4, #36]	; 0x24
  cp = (thread_t *)&ch.rlist.r_queue;
 80008dc:	002b      	movs	r3, r5
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80008de:	770e      	strb	r6, [r1, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80008e0:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80008e2:	689f      	ldr	r7, [r3, #8]
 80008e4:	4297      	cmp	r7, r2
 80008e6:	d2fb      	bcs.n	80008e0 <chThdExit+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80008e8:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80008ea:	600b      	str	r3, [r1, #0]
  tp->p_prev = cp->p_prev;
 80008ec:	604a      	str	r2, [r1, #4]
  tp->p_prev->p_next = tp;
 80008ee:	6011      	str	r1, [r2, #0]
  cp->p_prev = tp;
 80008f0:	6059      	str	r1, [r3, #4]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 80008f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80008f4:	4281      	cmp	r1, r0
 80008f6:	d1ee      	bne.n	80008d6 <chThdExit+0x16>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80008f8:	7f63      	ldrb	r3, [r4, #29]
 80008fa:	079b      	lsls	r3, r3, #30
 80008fc:	d104      	bne.n	8000908 <chThdExit+0x48>
    REG_REMOVE(tp);
 80008fe:	6922      	ldr	r2, [r4, #16]
 8000900:	6963      	ldr	r3, [r4, #20]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	6922      	ldr	r2, [r4, #16]
 8000906:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 8000908:	200f      	movs	r0, #15
 800090a:	f7ff fce9 	bl	80002e0 <chSchGoSleepS>
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
  /* The thread never returns here.*/
}
 800090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000910:	20000750 	.word	0x20000750
	...

08000920 <chSchDoReschedule>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000920:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <chSchDoReschedule+0x34>)
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8000922:	b510      	push	{r4, lr}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8000924:	6810      	ldr	r0, [r2, #0]
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 8000926:	6991      	ldr	r1, [r2, #24]

  tqp->p_next = tp->p_next;
 8000928:	6803      	ldr	r3, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800092a:	605a      	str	r2, [r3, #4]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800092c:	6013      	str	r3, [r2, #0]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800092e:	6190      	str	r0, [r2, #24]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8000930:	2201      	movs	r2, #1
 8000932:	7702      	strb	r2, [r0, #28]

  otp->p_state = CH_STATE_READY;
 8000934:	2200      	movs	r2, #0
 8000936:	770a      	strb	r2, [r1, #28]
 8000938:	688a      	ldr	r2, [r1, #8]
 800093a:	e000      	b.n	800093e <chSchDoReschedule+0x1e>
 800093c:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 800093e:	689c      	ldr	r4, [r3, #8]
 8000940:	4294      	cmp	r4, r2
 8000942:	d8fb      	bhi.n	800093c <chSchDoReschedule+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 8000944:	685a      	ldr	r2, [r3, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 8000946:	600b      	str	r3, [r1, #0]
  otp->p_prev = cp->p_prev;
 8000948:	604a      	str	r2, [r1, #4]
  otp->p_prev->p_next = otp;
 800094a:	6011      	str	r1, [r2, #0]
  cp->p_prev = otp;
 800094c:	6059      	str	r1, [r3, #4]

  chSysSwitch(currp, otp);
 800094e:	f7ff fc1f 	bl	8000190 <_port_switch>
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  chSchDoRescheduleAhead();
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */
}
 8000952:	bd10      	pop	{r4, pc}
 8000954:	20000750 	.word	0x20000750
	...

08000960 <__init_ram_areas>:
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	4694      	mov	ip, r2
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000966:	2600      	movs	r6, #0
/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000968:	4f10      	ldr	r7, [pc, #64]	; (80009ac <__init_ram_areas+0x4c>)
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800096a:	4d11      	ldr	r5, [pc, #68]	; (80009b0 <__init_ram_areas+0x50>)
 800096c:	4c11      	ldr	r4, [pc, #68]	; (80009b4 <__init_ram_areas+0x54>)
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <__init_ram_areas+0x58>)
 8000970:	4912      	ldr	r1, [pc, #72]	; (80009bc <__init_ram_areas+0x5c>)
      *p = 0;
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000972:	44bc      	add	ip, r7
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000974:	429c      	cmp	r4, r3
 8000976:	d90d      	bls.n	8000994 <__init_ram_areas+0x34>
 8000978:	001a      	movs	r2, r3
      *p = *tp;
 800097a:	c901      	ldmia	r1!, {r0}
 800097c:	c201      	stmia	r2!, {r0}
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800097e:	4294      	cmp	r4, r2
 8000980:	d8fb      	bhi.n	800097a <__init_ram_areas+0x1a>
 8000982:	43da      	mvns	r2, r3
 8000984:	1914      	adds	r4, r2, r4
 8000986:	08a4      	lsrs	r4, r4, #2
 8000988:	3401      	adds	r4, #1
 800098a:	00a4      	lsls	r4, r4, #2
 800098c:	191b      	adds	r3, r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800098e:	429d      	cmp	r5, r3
 8000990:	d902      	bls.n	8000998 <__init_ram_areas+0x38>
      *p = 0;
 8000992:	c340      	stmia	r3!, {r6}
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000994:	429d      	cmp	r5, r3
 8000996:	d8fc      	bhi.n	8000992 <__init_ram_areas+0x32>
      *p = 0;
      p++;
    }
    rap++;
 8000998:	3710      	adds	r7, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800099a:	4567      	cmp	r7, ip
 800099c:	d004      	beq.n	80009a8 <__init_ram_areas+0x48>
 800099e:	68bc      	ldr	r4, [r7, #8]
 80009a0:	68fd      	ldr	r5, [r7, #12]
 80009a2:	6839      	ldr	r1, [r7, #0]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	e7e5      	b.n	8000974 <__init_ram_areas+0x14>
#endif
}
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	08000a50 	.word	0x08000a50
 80009b0:	200008c0 	.word	0x200008c0
 80009b4:	200008c0 	.word	0x200008c0
 80009b8:	200008c0 	.word	0x200008c0
 80009bc:	08000ad0 	.word	0x08000ad0

080009c0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80009c0:	e7fe      	b.n	80009c0 <__default_exit>
 80009c2:	46c0      	nop			; (mov r8, r8)
	...

080009d0 <__late_init>:
 80009d0:	4770      	bx	lr
 80009d2:	46c0      	nop			; (mov r8, r8)
	...

080009e0 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 80009e0:	4770      	bx	lr
 80009e2:	46c0      	nop			; (mov r8, r8)
	...
 80009f0:	08000262 	.word	0x08000262
 80009f4:	08000242 	.word	0x08000242
 80009f8:	08000242 	.word	0x08000242
 80009fc:	08000266 	.word	0x08000266
 8000a00:	08000238 	.word	0x08000238
 8000a04:	08000230 	.word	0x08000230
 8000a08:	08000242 	.word	0x08000242
 8000a0c:	08000238 	.word	0x08000238

08000a10 <ch_debug>:
 8000a10:	6e69616d 18441600 08440204 1814100c     main..D...D.....
 8000a20:	1e1d1c00 00000000 00000000 00000000     ................
 8000a30:	6664656c 6873616c 00000000 656c6469     ledflash....idle
	...

08000a50 <ram_areas>:
 8000a50:	08000ad0 200008c0 200008c0 200008c0     ....... ... ... 
 8000a60:	08000ad0 00000000 00000000 00000000     ................
 8000a70:	08000ad0 00000000 00000000 00000000     ................
 8000a80:	08000ad0 00000000 00000000 00000000     ................
 8000a90:	08000ad0 00000000 00000000 00000000     ................
 8000aa0:	08000ad0 00000000 00000000 00000000     ................
 8000ab0:	08000ad0 00000000 00000000 00000000     ................
 8000ac0:	08000ad0 00000000 00000000 00000000     ................
